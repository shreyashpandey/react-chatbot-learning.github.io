{"version":3,"sources":["ActionProvider.js","MessageParser.js","Components/LearningOptions/LearningOptions.jsx","Components/LinkLists/LinkLists.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleJavascriptList","message","widget","updateChatbotState","this","setState","prevState","messages","MessageParser","actionProvider","state","console","log","LearningOptions","props","optionsMarkup","text","handler","id","map","option","className","onClick","LinkLists","linkMarkup","options","link","href","url","target","rel","config","initialMessages","widgets","widgetName","widgetFunc","App","messageParser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSA2BeA,E,WA1Bb,WAAYC,EAAsBC,GAAe,IAAD,gCAKhDC,qBAAuB,WACrB,IAAMC,EAAU,EAAKH,qBACnB,qEACA,CACEI,OAAQ,oBAIZ,EAAKC,mBAAmBF,IAZxBG,KAAKN,qBAAuBA,EAC5BM,KAAKC,SAAWN,E,+DAcCE,GAGjBG,KAAKC,UAAS,SAACC,GAAD,mBAAC,eACVA,GADS,IAEZC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BN,a,KCXvBO,E,WAVb,WAAYC,EAAgBC,GAAQ,oBAClCN,KAAKK,eAAiBA,EACtBL,KAAKM,MAAQA,E,kDAGTT,GACJU,QAAQC,IAAIX,O,KCuBHY,G,MA1BS,SAACC,GACvB,IAYMC,EAZU,CACd,CACEC,KAAM,aACNC,QAASH,EAAML,eAAeT,qBAC9BkB,GAAI,GAEN,CAAEF,KAAM,qBAAsBC,QAAS,aAAUC,GAAI,GACrD,CAAEF,KAAM,OAAQC,QAAS,aAAUC,GAAI,GACvC,CAAEF,KAAM,WAAYC,QAAS,aAAUC,GAAI,GAC3C,CAAEF,KAAM,iBAAkBC,QAAS,aAAUC,GAAI,IAGrBC,KAAI,SAACC,GAAD,OAChC,wBACEC,UAAU,yBAEVC,QAASF,EAAOH,QAHlB,SAKGG,EAAOJ,MAHHI,EAAOF,OAOhB,OAAO,qBAAKG,UAAU,6BAAf,SAA6CN,MCNvCQ,G,MAjBG,SAACT,GACjB,IAAMU,EAAaV,EAAMW,QAAQN,KAAI,SAACO,GAAD,OACnC,oBAAkBL,UAAU,iBAA5B,SACE,mBACEM,KAAMD,EAAKE,IACXC,OAAO,SACPC,IAAI,sBACJT,UAAU,qBAJZ,SAMGK,EAAKV,QAPDU,EAAKR,OAYhB,OAAO,oBAAIG,UAAU,YAAd,SAA2BG,MCyBrBO,EAtCA,CACfC,gBAAiB,CACblC,+BAAqB,uDAAsD,CACzEI,OAAQ,qBAGZ+B,QAAS,CACP,CACEC,WAAY,kBACZC,WAAY,SAACrB,GAAD,OAAW,cAAC,EAAD,eAAqBA,MAE9C,CACEoB,WAAY,kBACZC,WAAY,SAACrB,GAAD,OAAW,cAAC,EAAD,eAAeA,KACtCA,MAAO,CACLW,QAAS,CACP,CACET,KAAM,qBACNY,IACE,iGACFV,GAAI,GAEN,CACEF,KAAM,mBACNY,IACE,gEACFV,GAAI,GAEN,CACEF,KAAM,mBACNY,IAAK,8BACLV,GAAI,QCpBDkB,MAVf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,IAAD,CAASU,OAAQA,EAAQtB,eAAgBZ,EAAgBwC,cAAe7B,SCE/D8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.663b71ee.chunk.js","sourcesContent":["class ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  handleJavascriptList = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Fantastic, I've got the following resources for you on Javascript:\",\r\n      {\r\n        widget: \"javascriptLinks\",\r\n      }\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n\r\n  updateChatbotState(message) {\r\n    // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      messages: [...prevState.messages, message],\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;","class MessageParser {\r\n    constructor(actionProvider, state) {\r\n      this.actionProvider = actionProvider;\r\n      this.state = state;\r\n    }\r\n  \r\n    parse(message) {\r\n      console.log(message)\r\n    }\r\n  }\r\n  \r\n  export default MessageParser;","import React from \"react\";\r\n\r\nimport \"./LearningOptions.css\";\r\n\r\nconst LearningOptions = (props) => {\r\n  const options = [\r\n    {\r\n      text: \"Javascript\",\r\n      handler: props.actionProvider.handleJavascriptList,\r\n      id: 1,\r\n    },\r\n    { text: \"Data visualization\", handler: () => {}, id: 2 },\r\n    { text: \"APIs\", handler: () => {}, id: 3 },\r\n    { text: \"Security\", handler: () => {}, id: 4 },\r\n    { text: \"Interview prep\", handler: () => {}, id: 5 },\r\n  ];\r\n\r\n  const optionsMarkup = options.map((option) => (\r\n    <button\r\n      className=\"learning-option-button\"\r\n      key={option.id}\r\n      onClick={option.handler}\r\n    >\r\n      {option.text}\r\n    </button>\r\n  ));\r\n\r\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\r\n};\r\n\r\nexport default LearningOptions;\r\n","import React from \"react\";\r\n\r\nimport \"./LinkLists.css\";\r\n\r\nconst LinkLists = (props) => {\r\n  const linkMarkup = props.options.map((link) => (\r\n    <li key={link.id} className=\"link-list-item\">\r\n      <a\r\n        href={link.url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"link-list-item-url\"\r\n      >\r\n        {link.text}\r\n      </a>\r\n    </li>\r\n  ));\r\n\r\n  return <ul className=\"link-list\">{linkMarkup}</ul>;\r\n};\r\n\r\nexport default LinkLists;","import React from \"react\";\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\n\r\nimport LearningOptions from \"./Components/LearningOptions/LearningOptions\";\r\nimport LinkLists from \"./Components/LinkLists/LinkLists.jsx\";\r\nconst config = {\r\ninitialMessages: [\r\n    createChatBotMessage(\"Hi, I'm here to help. What do you want to \t\tlearn?\", {\r\n      widget: \"learningOptions\",\r\n    }),\r\n  ],\r\n  widgets: [\r\n    {\r\n      widgetName: \"learningOptions\",\r\n      widgetFunc: (props) => <LearningOptions {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"javascriptLinks\",\r\n      widgetFunc: (props) => <LinkLists {...props} />,\r\n      props: {\r\n        options: [\r\n          {\r\n            text: \"Introduction to JS\",\r\n            url:\r\n              \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\r\n            id: 1,\r\n          },\r\n          {\r\n            text: \"Mozilla JS Guide\",\r\n            url:\r\n              \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\r\n            id: 2,\r\n          },\r\n          {\r\n            text: \"Frontend Masters\",\r\n            url: \"https://frontendmasters.com\",\r\n            id: 3,\r\n          },\r\n        ],\r\n      }\r\n    },\r\n  ],\r\n}\r\nexport default config;","import React from 'react'; \nimport './App.css';\nimport Chatbot from 'react-chatbot-kit';\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}